#!/usr/bin/env node

var fs = require('fs')
var mdast = require('mdast')
var disparity = require('disparity')
var chalk = require('chalk')
var yargs = require('yargs')

disparity.removed = disparity.added = ''

var plugin = require('../lib/plugin')

yargs = yargs
  .usage('Usage: $0 documentation [file=README.md] --section "API" [--compare-only] [-- documentationjs options]')

  .alias('s', 'section')
  .describe('s', 'The section heading after which to inject generated documentation')
  .demand('s')

  .alias('c', 'compare-only')
  .describe('c', 'Instead of updating the given README with the generated documentation,' +
    ' just check if its contents match, exiting nonzero if not.')
  .default('c', false)

  .alias('q', 'quiet')
  .describe('q', 'Quiet mode: do not print messages or README diff to stdout.')
  .default('q', false)

  .help('h')
  .alias('h', 'help')

  .version(function () {
    return require('../package').version;
  })

  .wrap(yargs.terminalWidth())

  .example('$0 -s "API Docs" -- index.js --github')

var dashdash = process.argv.indexOf('--')
if (dashdash < 0) {
  dashdash = process.argv.length
}
var arglist = process.argv.slice(2, dashdash)
var documentationArgs = process.argv.slice(dashdash + 1)
var argv = yargs.parse(arglist)

if (documentationArgs.some(function (a) {
  return a === '-f' || a === '--format';
})) {
  console.error('Setting documentationjs format is not allowed in documentation-readme.')
  process.exit(1)
}

var log = argv.q ? function () {}
  : console.log.bind(console, '[documentation-readme] ')

var readmeFile = argv._.length ? argv._[0] : 'README.md'
var readmeContent = fs.readFileSync(readmeFile, 'utf-8')

mdast.use(plugin, {
  section: argv.s,
  documentationArgs: documentationArgs
}).process(readmeContent, function (err, file, content) {
  if (err) {
    throw err
  }

  var diffOutput = disparity.unified(readmeContent, content, {
    paths: [readmeFile, readmeFile]
  })
  if (!diffOutput.length) {
    log(readmeFile + ' is up to date.')
    process.exit(0)
  }

  if (argv.c) {
    log(chalk.bold(readmeFile + ' needs the following updates:'), '\n' + diffOutput)
    process.exit(1)
  } else {
    log(chalk.bold('Updating ' + readmeFile), '\n' + diffOutput)
  }

  fs.writeFileSync(readmeFile, content)
})

