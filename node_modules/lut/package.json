{
  "name": "lut",
  "version": "0.2.0",
  "description": "Render RGB lookup tables to a canvas",
  "main": "index.js",
  "scripts": {
    "prepublish": "node_modules/.bin/browserify demo.js -o bundle.js"
  },
  "keywords": [
    "canvas",
    "rgb",
    "lookup",
    "table",
    "colour",
    "grading",
    "graphics"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/lut.git"
  },
  "devDependencies": {
    "browserify": "~1.17.2"
  },
  "readme": "# lut #\n\n![Lookup Table](https://raw.github.com/hughsk/lut/master/image.png)\n\nRenders [RGB lookup tables](http://the-witness.net/news/2012/08/fun-with-in-engine-color-grading/) to a canvas element.\n\n## Installation ##\n\n``` bash\nnpm install lut\n```\n\n## Usage ##\n\n`lut(red, green, blue, canvas)`\n\n``` javascript\nvar lut = require('lut')\n  , canvas = document.createElement('canvas')\n\n// Defaults to 32x32x32, creating a new canvas element:\ndocument.body.appendChild(lut())\n\n// But you can render on top of an existing canvas,\n// and specify the resolution (number of shades) for\n// each colour too:\ndocument.body.appendChild(canvas)\nlut(64, 8, 128, canvas)\n```",
  "_id": "lut@0.2.0",
  "dist": {
    "shasum": "1926fc9f21ef6f674cc5da4d4e6c5f91689501af",
    "tarball": "http://registry.npmjs.org/lut/-/lut-0.2.0.tgz"
  },
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "1926fc9f21ef6f674cc5da4d4e6c5f91689501af",
  "_resolved": "https://registry.npmjs.org/lut/-/lut-0.2.0.tgz",
  "_from": "lut@*"
}
