{
  "name": "morton-page",
  "version": "0.1.0",
  "description": "Morton order index for multidimensional pages",
  "main": "zpage.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "bit-interleave": "~0.0.0",
    "is-property": "0.0.0"
  },
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/morton-page.git"
  },
  "keywords": [
    "morton",
    "page",
    "z",
    "order",
    "interleave",
    "curve",
    "hash",
    "table",
    "index"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "cbe8973ec8314f30d7b4a701b2b480ae3884d138",
  "bugs": {
    "url": "https://github.com/mikolalysenko/morton-page/issues"
  },
  "readme": "morton-page\n===========\nA data structure for maintaining a list of pages keyed by [Morton order](http://en.wikipedia.org/wiki/Z-order_curve) (also known as z-order or interleaving).\n\n## Example\n\n```javascript\n//Create a 2D page store having a capacity of (1<<4) == 16\nvar pageStore = require(\"morton-page\")(2, 4)\n\n//Add a page\npageStore.add({key: [10, 10], value: \"foo\"})\n\n//Retrieve a page\nvar x = pageStore.get(10, 10)\nconsole.log(x)\n\n//Remove the page\npageStore.remove(10, 10)\n\n//Try pulling the page out (returns null now)\nconsole.log(pageStore.get(10, 10))\n```\n\n## Install\n\n    npm install morton-page\n\n## API\n\n```javascript\nvar createPageStore = require(\"morton-page\")\n```\n\n### Constructor\n\n#### `var store = createPageStore(dimension, log_size[, shift, key])`\nCreates a z-order page store.\n\n* `dimension` is the dimension of the pages\n* `log_size` is the log base 2 of the number of buckets in the store\n* `shift` is the number of bits to shift each page by before indexing (default: `0`)\n* `key` is the property of each page to use for the index (default: `\"key\"`)\n\n**Returns** An instance of a `MortonPageStore` class specialized for the given input parameters.\n\n### Methods\n\n#### `store.add(page)`\nAdds a page to the store\n\n* `page` is an object with a field called `key` which is an array of coordinates representing the identifier of the page in the store.\n\n#### `store.get(i0, i1, ...)`\nRetrieves the page with the given key from the page store\n\n* `i0, i1, ...` is the name of the page\n\n**Returns** The page with the key `i0, i1, ...` if it is in the store, or `null` otherwise.\n\n#### `store.remove(i0, i1, ...)`\nRemoves the page with the given key from the store.\n\n* `i0, i1, ...` is the key of the page\n\n## FAQ\n\n### Why use this instead of an object?\n\nBasically it is faster and does not require creating any string objects.  All of the methods in this class require 0 allocations and thus will not trigger garbage collection events.\n\n## Credits\n(c) 2013 Mikola Lysenko. MIT License",
  "_id": "morton-page@0.1.0",
  "dist": {
    "shasum": "ae951747dce4eb5a1d2d98b827810aaf02dc7748",
    "tarball": "http://registry.npmjs.org/morton-page/-/morton-page-0.1.0.tgz"
  },
  "_from": "morton-page@>=0.1.0 <0.2.0",
  "_npmVersion": "1.2.24",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "_shasum": "ae951747dce4eb5a1d2d98b827810aaf02dc7748",
  "_resolved": "https://registry.npmjs.org/morton-page/-/morton-page-0.1.0.tgz"
}
