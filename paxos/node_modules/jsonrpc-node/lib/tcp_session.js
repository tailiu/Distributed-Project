// Generated by CoffeeScript 1.12.7
(function() {
  var EventEmitter, Session, readline,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require("events").EventEmitter;

  readline = require("readline");

  Session = (function(superClass) {
    extend(Session, superClass);

    function Session(socket) {
      if (socket != null) {
        this.init(socket);
      }
    }

    Session.prototype.clear = function() {
      if (this.socket != null) {
        this.stream.close();
        this.socket.destroy();
        delete this.stream;
        return delete this.socket;
      }
    };

    Session.prototype.init = function(socket) {
      this.clear();
      this.socket = socket;
      this.encoding = "utf8";
      this.delimiter = "\n";
      this.socket.setEncoding(this.encoding);
      this.socket.on("error", (function(_this) {
        return function(msg) {
          return _this.emit("error", msg);
        };
      })(this));
      this.stream = readline.createInterface(this.socket, this.socket);
      return this.stream.on("line", (function(_this) {
        return function(data) {
          var e, msg;
          try {
            msg = JSON.parse(data);
            return _this.emit("message", msg);
          } catch (error) {
            e = error;
            console.log(socket.remoteAddress + " invalid message");
            return _this.emit("error", "" + e);
          }
        };
      })(this));
    };

    Session.prototype.sendData = function(object, callback) {
      return this.socket.write(this.format(object), this.encoding, callback);
    };

    Session.prototype.sendNotification = function(method, params, callback) {
      return this.sendData({
        id: null,
        method: method,
        params: params || ""
      }, callback);
    };

    Session.prototype.sendError = function(id, message, callback) {
      return this.sendData({
        id: id,
        error: message || ""
      }, callback);
    };

    Session.prototype.sendMessage = function(id, method, params, callback) {
      return this.sendData({
        id: id,
        method: method,
        params: params || ""
      }, callback);
    };

    Session.prototype.sendReply = function(id, result, callback) {
      return this.sendData({
        id: id,
        result: result || ""
      }, callback);
    };

    Session.prototype.format = function(msg) {
      return (JSON.stringify(msg)) + "\n";
    };

    Session.prototype.close = function() {
      return this.socket.close();
    };

    return Session;

  })(EventEmitter);

  module.exports = Session;

}).call(this);
