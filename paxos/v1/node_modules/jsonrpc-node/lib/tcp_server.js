// Generated by CoffeeScript 1.12.7
(function() {
  var Reply, Server, Session, net, tls,
    hasProp = {}.hasOwnProperty;

  net = require("net");

  tls = require("tls");

  Session = require("./tcp_session");

  Reply = require("./reply");

  Server = module.exports = function(opt) {
    var handler;
    handler = function(socket) {
      return handler.handle(socket);
    };
    handler.__proto__ = Server;
    handler.methods = {};
    handler.counter = 0;
    if (opt != null) {
      handler.register(opt);
    }
    return handler;
  };

  Server.register = function(method, callback) {
    var key, results;
    if (callback == null) {
      if (method instanceof Function) {
        return this.defaultMethod = method;
      } else {
        results = [];
        for (key in method) {
          if (!hasProp.call(method, key)) continue;
          callback = method[key];
          results.push(this.methods[key] = callback);
        }
        return results;
      }
    } else {
      return this.methods[method] = callback;
    }
  };

  Server.handle = function(socket) {
    var session;
    socket.setEncoding("utf-8");
    session = new Session(socket);
    session.id = ++this.counter;
    session.on("message", (function(_this) {
      return function(msg) {
        return _this.execute(session, msg);
      };
    })(this));
    session.on("error", function(msg) {
      return console.log("session " + session.id + " error: ", msg);
    });
    return session.on("close", function() {
      return console.log("session " + session.id + " closed");
    });
  };

  Server.execute = function(session, msg) {
    var reply;
    reply = new Reply(session, msg.id);
    if ((this.auth != null) && (session.user == null)) {
      return !this.auth(msg, session, (function(_this) {
        return function(err, user) {
          if ((err != null) || (user == null)) {
            console.log(reply.session.socket.remoteAddress + " not authorized");
            return reply.error("not authenticated");
          } else {
            session.user = user;
            return _this.executeNoAuth(msg, reply, user);
          }
        };
      })(this));
    } else {
      return this.executeNoAuth(msg, reply, session.user);
    }
  };

  Server.executeNoAuth = function(msg, reply, user) {
    var args, method;
    method = this.methods[msg.method];
    args = (msg.params != null) && Array.isArray(msg.params) ? msg.params : [];
    if (method != null) {
      return method(args, reply, user);
    } else {
      if (this.defaultMethod != null) {
        return this.defaultMethod(msg.method, args, reply, user);
      } else {
        console.log(reply.session.socket.remoteAddress + " invalid requested method " + method);
        return reply.error("method not found");
      }
    }
  };

  Server.on = function(event, callback) {
    return this.socket.on(event, callback);
  };

  Server.listen = function() {
    this.socket = net.createServer(this);
    return this.socket.listen.apply(this.socket, arguments);
  };

  Server.listenSSL = function(port, host, key, cert, callback) {
    this.socket = tls.createServer({
      key: key,
      cert: cert
    }, this);
    return this.socket.listen(port, host, callback);
  };

  Server.setAuth = function(auth) {
    this.auth = auth;
  };

}).call(this);
