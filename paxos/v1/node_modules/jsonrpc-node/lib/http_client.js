// Generated by CoffeeScript 1.12.7
(function() {
  var BasicAuth, Client, EventEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BasicAuth = require("./http_client_basic_auth");

  EventEmitter = require("events").EventEmitter;

  Client = (function(superClass) {
    extend(Client, superClass);

    function Client(port, host, secure) {
      this.host = host;
      this.port = parseInt(port);
      this.transport = require((secure != null) && secure ? "https" : "http");
    }

    Client.prototype.setAuth = function(auth) {
      this.auth = auth;
    };

    Client.prototype.setBasicAuth = function(username, password) {
      return this.setAuth(new BasicAuth(username, password));
    };

    Client.prototype.sendData = function(request, headers, callback) {
      var options, query;
      if (callback == null) {
        callback = headers;
        headers = {};
      }
      options = {
        host: this.host,
        port: this.port,
        method: "post",
        path: this.path || "/",
        headers: headers
      };
      options.headers.Host = this.host;
      if ((this.port != null) && (this.port !== 80 || this.port !== 443)) {
        options.headers.Host += ":" + this.port;
      }
      query = JSON.stringify(request);
      options.useSSL = true;
      options.headers['Content-Length'] = query.length;
      options.headers["Content-Type"] = "application/json";
      if (this.auth != null) {
        this.auth.sign(options, request);
      }
      options.rejectUnauthorized = false;
      request = this.transport.request(options);
      request.on("error", function(err) {
        return typeof callback === "function" ? callback(err) : void 0;
      });
      request.on("response", function(response) {
        var buffer;
        buffer = '';
        response.on('data', function(chunk) {
          return buffer += chunk;
        });
        return response.on('end', function() {
          var e, err, json, msg;
          err = null;
          msg = null;
          if (response.statusCode === 200) {
            try {
              json = JSON.parse(buffer);
              if (json.error != null) {
                err = new Error(json.error);
              }
              if (json.result != null) {
                msg = json.result;
              }
            } catch (error) {
              e = error;
              err = e;
            }
          } else {
            err = "Server replied with : " + response.statusCode;
          }
          return typeof callback === "function" ? callback(err, msg) : void 0;
        });
      });
      return request.end(query);
    };

    Client.prototype.call = function(method, params, callback) {
      var request;
      request = {
        method: method,
        params: params,
        id: (new Date).getTime()
      };
      return this.sendData(request, callback);
    };

    Client.prototype.notify = function(method, params, callback) {
      return this.sendData({
        id: null,
        method: method,
        params: params
      }, callback);
    };

    Client.prototype.onceReady = function(callback) {
      return callback();
    };

    return Client;

  })(EventEmitter);

  module.exports = Client;

}).call(this);
