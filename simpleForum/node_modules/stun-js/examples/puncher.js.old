var crypto = require('crypto')
var dgram = require('dgram')
var winston = require('winston')

// args
var argv = require('yargs')
  .usage('Usage: $0 [params]')
  .demand('b')
  .alias('b', 'bind')
  .nargs('b', 1)
  .describe('b', 'local listening port')
  // remote address
  .demand('a')
  .alias('a', 'addr')
  .nargs('a', 1)
  .describe('a', 'public peer address')
  // remote port
  .demand('p')
  .alias('p', 'port')
  .nargs('p', 1)
  .describe('p', 'public peer port')
  // connect operation
  .demand('c')
  .alias('c', 'punch')
  .boolean('c')
  .describe('c', 'execute hole punching')
  // send test data
  .demand('s')
  .alias('s', 'send')
  .boolean('s')
  .describe('s', 'send test data')
  // help
  .help('h')
  .alias('h', 'help')
  .argv

var myId = crypto.randomBytes(20).toString('hex')
var remoteId
var tokenAttempts = 60
var sendTokenInterval
var dataMessages = 10

function sendId () {
  sendTokenInterval = setInterval(function () {
    if (tokenAttempts > 0) {
      tokenAttempts--
      var data = 'id=' + myId
      winston.info('sending message ' + data + ' to ' + argv.addr + ':' + argv.port)
      var message = new Buffer(data)
      socket.send(message, 0, message.length, argv.port, argv.addr)
    } else {
      winston.error('failed to connect with ' + argv.addr + ':' + argv.port)
      clearInterval(sendTokenInterval)
    }
  }, 500)
}

function sendAck () {
  var data = 'ack=' + myId
  winston.info('sending message ' + data + ' to ' + argv.addr + ':' + argv.port)
  var message = new Buffer(data)
  socket.send(message, 0, message.length, argv.port, argv.addr)
}

function sendData () {
  for (var i = 0; i < dataMessages; i++) {
    var data = 'message ' + i
    winston.info('sending message ' + data + ' to ' + argv.addr + ':' + argv.port)
    var message = new Buffer(data)
    socket.send(message, 0, message.length, argv.port, argv.addr)
  }
}

// socket config
var socket = dgram.createSocket('udp4')
socket.on('error', function (error) {
  winston.error('socket error:\n' + error.stack)
  socket.close()
})
socket.on('message', function (message, rinfo) {
  var data = message.toString()
  winston.info('receiving message ' + data + ' from ' + rinfo.address + ':' + rinfo.port)
  if (beginsWith(data, 'id=')) {
    onRemoteId(data.replace('id=', ''))
  } else if (beginsWith(data, 'ack=')) {
    onAck(data.replace('ack=', ''))
  }
})
socket.on('listening', function () {
  var address = socket.address()
  winston.info('listening at ' + address.address + ':' + address.port)
  if (argv.punch) {
    sendId()
  } else if (argv.send) {
    sendData()
  }
})

// bind socket
socket.bind(argv.bind)

function onRemoteId (id) {
  winston.info('receiving remote token ' + id)
  remoteId = id
  sendAck()
}

function onAck (id) {
  winston.info('receiving ack from ' + id)
  winston.info('peer knows our token')
  clearInterval(sendTokenInterval)
  if (argv.send) {
    sendData()
  }
}

function beginsWith (string, prefix) {
  return string.slice(0, prefix.length) === prefix
}
